[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "unified-theming"
version = "1.0.0"
description = "Apply consistent themes across GTK, Qt, and containerized applications"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}  # Update with actual license
authors = [
    {name = "Unified Theming Team"}
]
maintainers = [
    {name = "Unified Theming Team"}
]
keywords = [
    "gtk",
    "qt",
    "theming",
    "libadwaita",
    "desktop",
    "linux",
    "customization"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Desktop Environment",
    "License :: OSI Approved :: MIT License",  # Update with actual license
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
    "Environment :: X11 Applications :: GTK",
    "Environment :: X11 Applications :: Qt",
]

dependencies = [
    "click>=8.0",
    "PyGObject>=3.42",  # For GTK4 GUI
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "black>=23.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "isort>=5.12",
    "pylint>=2.17",
]
gui = [
    "PyGObject>=3.42",
]

[project.urls]
Homepage = "https://github.com/yourusername/unified-theming"
Documentation = "https://github.com/yourusername/unified-theming/docs"
Repository = "https://github.com/yourusername/unified-theming"
"Bug Tracker" = "https://github.com/yourusername/unified-theming/issues"

[project.scripts]
unified-theming = "unified_theming.cli.commands:main"
unified-theming-gui = "unified_theming.gui.application:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["unified_theming*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=unified_theming",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests that require GUI",
]

[tool.coverage.run]
source = ["unified_theming"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
]

[tool.pylint.format]
max-line-length = 88
